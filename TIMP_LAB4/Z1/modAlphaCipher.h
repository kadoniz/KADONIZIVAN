/**
* @file modAlphaCipher.h
* @author Кадомцев И.Д.
* @version 1.0
* @brief Описание класса modAlphaCipher
* @date 27.04.2022
* @copyright ИБСТ ПГУ
*/
#pragma once
#include <vector>
#include <string>
#include <map>
#include <locale>
#include <cctype>
#include "exception.h"
using namespace std;
/**  @brief  Класс, который реализует шифрование сообщений методом "Гронсвельда"
* @warning Работает только с русскоязычными сообщениями!
* */
class modAlphaCipher
{
private:
/// @brief  Используемый алфавит для сообщений
    wstring numAlpha = L"АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ";//алфавит по порядку
    /// @brief  Ассоциативный массив "номер по символу"
    map <char,int> alphaNum; //ассоциативный массив "номер по символу"
/// @brief  Атрибут для ключа
    vector <int> key; //ключ
      /** @brief  Преобразование строки в вектор
     * @details В вектор типа "int" с именем "Result" формируются числа, которые являются индексами алфавита "numAlpha" из строки, 
     * которая пришла на вход.
     * @return std::vector <int>, в котором хранятся индексы букв сообщения из алфавита "numAlpha"
     */
    vector<int> convert(const wstring& s); //преобразование строка-вектор
      /** @brief Преобразование вектора(чисел) в строку
     * @details В переменную типа "wstring" с именем "Result" формируется строка по индексам алфавита "numAlpha".
     * Индексы хранятся в векторе типа "int", который пришёл на вход.
     * @return строка текста типа "wstring"
     */
    wstring convert(const vector<int>& v); //преобразование вектор-строка
    /** @brief  Валидация ключа
     * @details Ключ проверяется на пустоту при помощи обычного условия.
     * @throw exc, если ключ является пустым или в нём присутствуют недопустимые символы.
     * @return Ключ в виде строки типа "wstring", который успешно прошёл валидацию.
     */
    wstring get_val_kl(const wstring & s);
     /** @brief  Валидация текста при шифровании/расшифровании
     * @details Текст проверяется на пустоту при помощи обычного условия.
     * @throw exc, если текст является пустым или в нём присутствуют недопустимые символы.
     * @return Текст в виде строки типа "wstring", который успешно прошёл валидацию
     */
    wstring get_val_txt(const wstring & s);

public:
/// @brief Запрещающий конструктор без параметров
    modAlphaCipher()=delete; //запретим конструктор без параметров
    /** @brief  Конструктор для ключа
      *  @param std::wstring - ключ в виде строки
      */ 
    modAlphaCipher(wstring skey); //конструктор для установки ключа
    /**
     * @brief Метод, предназначенный для шифрования
     * @details Формируется вектор work из строки открытого текста с помощью метода convert(). 
     * @throw exc , если строка, которая пришла на вход оказывается пустой или в ней есть недопустимые символы
     * @return строка шифротекста типа "wstring"
     */
    wstring encrypt(const wstring& open_text); //шифрование
    /**
     * @brief Метод, предназначенный для расшифрования
     * @details Здесь сначала формируется вектор work из строки  щифратекста с помощью метода convert().  
     *@param std::wstring cipher_text - сообщение, которое нужно расшифровать
     * @throw exc , если строка, которая пришла на вход оказывается пустой или в ней есть недопустимые символы
     * @return  строка расшифрованного текста типа "wstring"
     */
    wstring decrypt(const wstring& cipher_text);//расшифрование
};
